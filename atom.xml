<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Aileen-zl</title>
  <subtitle>拼着一切代价，奔你的前程！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://Aileen-zl.github.io/"/>
  <updated>2017-06-30T12:29:21.744Z</updated>
  <id>http://Aileen-zl.github.io/</id>
  
  <author>
    <name>Aileen-zl</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>程序流程控制（三）--循环（while，do..while，for）</title>
    <link href="http://Aileen-zl.github.io/Java/%E7%A8%8B%E5%BA%8F%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%EF%BC%88%E4%B8%89%EF%BC%89--%E5%BE%AA%E7%8E%AF%EF%BC%88while%EF%BC%8Cdo..while%EF%BC%8Cfor%EF%BC%89.html"/>
    <id>http://Aileen-zl.github.io/Java/程序流程控制（三）--循环（while，do..while，for）.html</id>
    <published>2017-05-28T16:00:00.000Z</published>
    <updated>2017-06-30T12:29:21.744Z</updated>
    
    <content type="html"><![CDATA[<h2 id="4-循环"><a href="#4-循环" class="headerlink" title="4. 循环"></a><strong>4. 循环</strong></h2><h3 id="（1）-while循环"><a href="#（1）-while循环" class="headerlink" title="（1）. while循环"></a><strong>（1）. while循环</strong></h3><blockquote>
<p><strong>语法：</strong><br>&#160;&#160;&#160;&#160;while(循环条件){<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;循环体<br>&#160;&#160;&#160;&#160;}</p>
</blockquote>
<a id="more"></a>
<font size="4"><strong>解释一下：</strong><br>&#160;&#160;&#160;&#160;循环条件结果如果是 true，那么就执行循环体；如果是 false，就结束循环。通俗来说，就是只有满足了循环条件之后才能执行循环体。<br>&#160;&#160;&#160;&#160;（循环条件只有 true 和 false 这两种情况）<br></font>


<font size="4"><strong>还是举例说明吧：</strong><br>&#160;&#160;&#160;&#160;打印1到100之间的数；<br>&#160;&#160;&#160;&#160;打印1-100之间的所有的奇数和。<br></font>

<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 打印1-100之间的数</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo1</span></span>&#123;	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">		</div><div class="line">		<span class="keyword">int</span> i = <span class="number">1</span>;</div><div class="line">			</div><div class="line">		<span class="keyword">while</span>(i &lt;= <span class="number">100</span>)&#123;</div><div class="line">			System.out.println(i);	</div><div class="line">			i++;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 打印1-100之间的所有的奇数和</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo1</span></span>&#123;	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">		</div><div class="line">		<span class="keyword">int</span> i = <span class="number">1</span>; </div><div class="line">		<span class="keyword">int</span> sum = <span class="number">0</span>; <span class="comment">//声明变量，用于存储奇数和</span></div><div class="line">						</div><div class="line">		<span class="keyword">while</span>(i &lt;= <span class="number">100</span>)&#123;</div><div class="line">			<span class="keyword">if</span>(i%<span class="number">2</span> != <span class="number">0</span>)&#123;</div><div class="line">				sum += i; <span class="comment">//sum = sum + i;</span></div><div class="line">			&#125;</div><div class="line">			i++;</div><div class="line">		&#125;</div><div class="line">		System.out.println(sum);</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//输出结果：2500</span></div></pre></td></tr></table></figure>
<h3 id="（2）-do…while循环"><a href="#（2）-do…while循环" class="headerlink" title="（2）. do…while循环"></a><strong>（2）. do…while循环</strong></h3><blockquote>
<p><strong>语法：</strong><br>&#160;&#160;&#160;&#160;do{<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;循环体<br>&#160;&#160;&#160;&#160;}while(循环条件);</p>
</blockquote>
<font size="4"><strong>还是使用上面的例子吧：</strong><br>&#160;&#160;&#160;&#160;打印1到100之间的数；<br>&#160;&#160;&#160;&#160;打印1-100之间的所有的奇数和。<br></font>

<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//打印1-100之间的数</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo1</span></span>&#123;	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">		</div><div class="line">		<span class="keyword">int</span> i = <span class="number">1</span>; </div><div class="line">		</div><div class="line">		<span class="keyword">do</span>&#123;</div><div class="line">			System.out.println(i);</div><div class="line">			i++;</div><div class="line">		&#125;<span class="keyword">while</span>(i &lt;= <span class="number">100</span>);</div><div class="line">		<span class="comment">//很明显在这里是先执行循环体，变量i自增之后再进行循环条件的判断</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//打印1-100之间的所有奇数的和</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo1</span></span>&#123;	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">		</div><div class="line">		<span class="keyword">int</span> i = <span class="number">1</span>; </div><div class="line">		<span class="keyword">int</span> sum = <span class="number">0</span>; <span class="comment">//声明一个变量，用于存储奇数和</span></div><div class="line">			</div><div class="line">		<span class="keyword">do</span>&#123;</div><div class="line">			<span class="keyword">if</span>(i%<span class="number">2</span> != <span class="number">0</span>)&#123;</div><div class="line">				sum += i;	</div><div class="line">			&#125;				</div><div class="line">			i++;</div><div class="line">		&#125;<span class="keyword">while</span>(i &lt;= <span class="number">100</span>);</div><div class="line">			</div><div class="line">		System.out.println(sum);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//输出结果：2500</span></div></pre></td></tr></table></figure>
<font size="4"><br>&#160;&#160;&#160;&#160; 循环的相关内容总结到这里，突然想到很久以前在学C的时候，做到这样的一个习题：“让我们打印出所有三位数的水仙花数”，大脑里第一反应：神马是水仙花数，一脸懵逼，还要让我们用程序去实现它，感觉好坑爹啊，虽然最后历经波折还是把它给做出来了，现在想想都是一把辛酸泪啊。废话说的有点多了，现在既然又提到了这个题目，我还是用java语言再去做一遍吧。<br></font>

<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 打印出所有三位数的水仙花数</span></div><div class="line"><span class="comment">// 什么是水仙花数：一个三位数，它的每一位数的位数次幂之和等于这个数本身，这样的数就是水仙花数。比如153</span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">*分析：</div><div class="line">		循环条件：100-1000之间的三位数</div><div class="line">		操作：获得这个三位数的每一位，判断是否为水仙花数，自增</div><div class="line">*/</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo1</span></span>&#123;	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">		</div><div class="line">		<span class="keyword">int</span> i = <span class="number">100</span>; </div><div class="line">			</div><div class="line">		<span class="keyword">do</span>&#123;</div><div class="line">			<span class="comment">// 获得三位数的每一位</span></div><div class="line">			<span class="keyword">int</span> a = i%<span class="number">10</span>;  <span class="comment">//个位</span></div><div class="line">			<span class="keyword">int</span> b = (i%<span class="number">100</span>)/<span class="number">10</span>; <span class="comment">//十位</span></div><div class="line">			<span class="keyword">int</span> c = i/<span class="number">100</span>;  <span class="comment">//百位</span></div><div class="line">			<span class="comment">// 判断是否为水仙花数</span></div><div class="line">			<span class="keyword">if</span>((a*a*a + b*b*b + c*c*c) == i)&#123;</div><div class="line">				System.out.println(i);	</div><div class="line">			&#125;</div><div class="line">			<span class="comment">// 自增</span></div><div class="line">			i++;				</div><div class="line">		&#125;<span class="keyword">while</span>(i &lt; <span class="number">1000</span>);</div><div class="line">			</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//输出结果为：153、370、371、407</span></div></pre></td></tr></table></figure>
<h3 id="（3）-for循环"><a href="#（3）-for循环" class="headerlink" title="（3）. for循环"></a><strong>（3）. for循环</strong></h3><blockquote>
<p><strong>语法：</strong><br>&#160;&#160;&#160;&#160;for(表达式1; 表达式2; 表达式3){<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;循环体<br>&#160;&#160;&#160;&#160;}</p>
<p>有幸在网上找到一张某个筒子分享的for循环执行顺序图，我就懒得再画了，在这里把它的图贴上来供大家形象的理解，谢谢这位筒子了。</p>
</blockquote>
<font size="4"><strong>循环执行顺序（参照下图）：</strong><br>&#160;&#160;&#160;&#160;先执行语句1，在判断循环条件是否为真，如果为真，则执行语句2，如果为假，则退出循环；<br>&#160;&#160;&#160;&#160;执行完语句2，接着执行语句3；<br>&#160;&#160;&#160;&#160;执行完语句3，再反过来判断循环条件是否成立，如果成立，在接着执行语句2，然后再去执行语句3。<br></font><br>&#160;&#160;&#160;&#160;<img src="http://img.blog.csdn.net/20170626224851997?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzM4NDc4OA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br><br><font size="4"><strong>解释一下：</strong><br>&#160;&#160;&#160;&#160;表达式1：计数器的初始化，仅初始化一次<br>&#160;&#160;&#160;&#160;表达式2：循环条件的判断，需要多次执行它<br>&#160;&#160;&#160;&#160;表达式3：更新计数器，也需要多次执行它<br></font>

<font size="4"><strong>继续举例说明：</strong><br>&#160;&#160;&#160;&#160;还是沿用之前的例子：打印1-100之间的所有的奇数和。<br></font>

<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 打印1-100之间的所有的奇数和</span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* int i = 1; 是计数器的初始化</div><div class="line">* i &lt;= 100; 是循环条件，且它要循环多少次就判断多少次</div><div class="line">* i++; 是计数器的累加，也是循环几次就累加几次</div><div class="line">*/</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo1</span></span>&#123;	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">			</div><div class="line">		<span class="keyword">int</span> sum = <span class="number">0</span>; <span class="comment">//声明变量，用于存储奇数和</span></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++)&#123;</div><div class="line">				</div><div class="line">			<span class="keyword">if</span>(i%<span class="number">2</span> != <span class="number">0</span>)&#123;</div><div class="line">				sum += i;</div><div class="line">			&#125;</div><div class="line">				</div><div class="line">		&#125;</div><div class="line">		System.out.println(sum);		</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//输出结果为：2500</span></div></pre></td></tr></table></figure>
<font size="4"><strong>再举两个比较典型的例子吧：</strong><br>&#160;&#160;&#160;&#160;打印6行6列的*<br>&#160;&#160;&#160;&#160;打印九九乘法表<br></font>

<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//打印6行6列的*</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo1</span></span>&#123;	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">		</div><div class="line">		<span class="comment">//这是为了控制行</span></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">6</span>; j++)&#123;</div><div class="line">		    <span class="comment">//这是为了控制列</span></div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">6</span>; i++)&#123;</div><div class="line">				System.out.print(<span class="string">"*"</span> + <span class="string">" "</span>); <span class="comment">//为了使打印出的*阵好看，再*与*之间加一个空格</span></div><div class="line">			&#125;</div><div class="line">			System.out.println(); <span class="comment">//换行</span></div><div class="line">		&#125;</div><div class="line">			</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//打印九九乘法表</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo1</span></span>&#123;	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">			</div><div class="line">		<span class="comment">//做行的循环</span></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++)&#123;</div><div class="line">				<span class="comment">//做列的循环</span></div><div class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++)&#123;</div><div class="line">					System.out.print(j + <span class="string">"*"</span> + i + <span class="string">"="</span> + (j*i) + <span class="string">"\t"</span>);</div><div class="line">				&#125;</div><div class="line">				System.out.println();</div><div class="line">		&#125;</div><div class="line">			</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="（4）-break"><a href="#（4）-break" class="headerlink" title="（4）. break"></a><strong>（4）. break</strong></h3><blockquote>
<p>break：结束整个循环</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 一个马拉松运动员，每天早上的训练计划是围着操场跑40圈。</div><div class="line">* 可是，今天跑到第10圈的时候，感觉肚子很痛，不能坚持训练了，如何用程序描述呢？</div><div class="line">*/</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo1</span></span>&#123;	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">			</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">40</span>; i++)&#123;</div><div class="line">	 		System.out.println(<span class="string">"跑完第"</span>+i+<span class="string">"圈了。"</span>);</div><div class="line">	 				</div><div class="line">				<span class="keyword">if</span>(i==<span class="number">10</span>)&#123;</div><div class="line">	 				System.out.println(<span class="string">"肚子很痛，不能跑了..."</span>);</div><div class="line">	 				<span class="keyword">break</span>;<span class="comment">//退出整个父级循环</span></div><div class="line">	 			&#125;	</div><div class="line">		&#125;</div><div class="line">		System.out.println(<span class="string">"今天训练到此结束！"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="（5）-continue"><a href="#（5）-continue" class="headerlink" title="（5）. continue"></a><strong>（5）. continue</strong></h3><blockquote>
<p>continue：结束当前循环，后续循环照常执行</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 一个马拉松运动员，每天早上的训练计划是围着操场跑40圈。</div><div class="line"> * 今天跑到第10圈的时候，手机响了，去接个电话回来接着跑完</div><div class="line"> * 剩下的圈数，如何用程序描述？</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo1</span></span>&#123;	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">			</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">40</span>; i++)&#123;	 				</div><div class="line">	 				</div><div class="line">			<span class="keyword">if</span>(i==<span class="number">10</span>)&#123;</div><div class="line">	 			System.out.println(<span class="string">"去接了个电话回来..."</span>);</div><div class="line">	 			<span class="keyword">continue</span>;<span class="comment">//结束本次循环，继续后续的循环</span></div><div class="line">	 		&#125;</div><div class="line">	 		System.out.println(<span class="string">"跑完第"</span>+i+<span class="string">"圈了。"</span>);	</div><div class="line">		&#125;</div><div class="line">		System.out.println(<span class="string">"今天训练到此结束！"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      程序流程控制之三种循环
    
    </summary>
    
      <category term="Java" scheme="http://Aileen-zl.github.io/categories/Java/"/>
    
    
      <category term="流程控制" scheme="http://Aileen-zl.github.io/tags/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
    
      <category term="while" scheme="http://Aileen-zl.github.io/tags/while/"/>
    
      <category term="do-while" scheme="http://Aileen-zl.github.io/tags/do-while/"/>
    
      <category term="for" scheme="http://Aileen-zl.github.io/tags/for/"/>
    
      <category term="循环" scheme="http://Aileen-zl.github.io/tags/%E5%BE%AA%E7%8E%AF/"/>
    
  </entry>
  
  <entry>
    <title>程序流程控制（二）--三元运算符</title>
    <link href="http://Aileen-zl.github.io/Java/%E7%A8%8B%E5%BA%8F%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%EF%BC%88%E4%BA%8C%EF%BC%89--%E4%B8%89%E5%85%83%E8%BF%90%E7%AE%97%E7%AC%A6.html"/>
    <id>http://Aileen-zl.github.io/Java/程序流程控制（二）--三元运算符.html</id>
    <published>2017-05-27T16:00:00.000Z</published>
    <updated>2017-06-30T12:30:01.293Z</updated>
    
    <content type="html"><![CDATA[<h3 id="3-三元运算符"><a href="#3-三元运算符" class="headerlink" title="3. 三元运算符"></a><strong>3. 三元运算符</strong></h3><blockquote>
<p><strong>语法：</strong><br>&#160;&#160;&#160;&#160;判断表达式？表达式1：表达式2</p>
</blockquote>
<a id="more"></a>
<p><strong><font size="4">解释一下：</font></strong><br>&#160;&#160;&#160;&#160;如果判断表达式的运算结果为 false，那么整个表达式的结果就是 表达式2；<br>&#160;&#160;&#160;&#160;如果判断表达式的运算结果为 true，那么整个表达式的结果就是 表达式1。<br>&#160;&#160;&#160;&#160;<font color="red">例如：sex == 1？’男’：’女’;</font><br>&#160;&#160;&#160;&#160;（三元运算符适合判断2个值中使用哪一个的情况。）</p>
<p><strong><font size="4">还是举个例子吧：</font></strong><br>&#160;&#160;&#160;&#160;最典型的选择男和女的情况，我们用1代表男，用2代表女。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 我们可以用 if 和 switch 来做选择</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo1</span></span>&#123;	</div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">		</div><div class="line">			<span class="keyword">int</span> sex = <span class="number">1</span>;</div><div class="line">			</div><div class="line">			<span class="keyword">if</span>(sex == <span class="number">1</span>)&#123;</div><div class="line">				System.out.println(<span class="string">"男"</span>);</div><div class="line">			&#125;<span class="keyword">else</span>&#123;</div><div class="line">				System.out.println(<span class="string">"女"</span>);	</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">			<span class="keyword">switch</span>(sex)&#123;</div><div class="line">				<span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">					System.out.println(<span class="string">"男"</span>);</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				<span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">					System.out.println(<span class="string">"女"</span>);</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 输出结果为：男 男</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 用 if 和 switch 来做选择时，把男或女放在变量里边</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo1</span></span>&#123;	</div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">		</div><div class="line">			<span class="keyword">int</span> sex = <span class="number">1</span>;</div><div class="line">			<span class="keyword">char</span> sexText = <span class="string">' '</span>;</div><div class="line">			</div><div class="line">			<span class="keyword">if</span>(sex == <span class="number">1</span>)&#123;</div><div class="line">				sexText = <span class="string">'男'</span>;</div><div class="line">			&#125;<span class="keyword">else</span>&#123;</div><div class="line">				sexText = <span class="string">'女'</span>;</div><div class="line">			&#125;</div><div class="line">			System.out.println(sexText);</div><div class="line">			</div><div class="line">			<span class="keyword">switch</span>(sex)&#123;</div><div class="line">				<span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">					sexText = <span class="string">'男'</span>;</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				<span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">					sexText = <span class="string">'女'</span>;</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">			System.out.println(sexText);</div><div class="line">		&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 输出结果为：男 男</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 很显然，上面我们用 if 和 switch 来实现的话，比较复杂；下面我们用三元运算符来实现它</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo1</span></span>&#123;	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">		</div><div class="line">		<span class="keyword">int</span> sex = <span class="number">1</span>;</div><div class="line">		<span class="comment">// 判断 sex==1 是否为真，如果为真，则结果为'男'；如果为假，则结果为'女'</span></div><div class="line">		<span class="keyword">char</span> sText = sex == <span class="number">1</span>?<span class="string">'男'</span>:<span class="string">'女'</span>;</div><div class="line">		System.out.println(sText);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 输出结果为：男</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      程序流程控制之三元运算符
    
    </summary>
    
      <category term="Java" scheme="http://Aileen-zl.github.io/categories/Java/"/>
    
    
      <category term="java" scheme="http://Aileen-zl.github.io/tags/java/"/>
    
      <category term="流程控制" scheme="http://Aileen-zl.github.io/tags/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
    
      <category term="三元运算符" scheme="http://Aileen-zl.github.io/tags/%E4%B8%89%E5%85%83%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    
  </entry>
  
  <entry>
    <title>程序流程控制（一）— if判断、switch分支判断</title>
    <link href="http://Aileen-zl.github.io/Java/%E7%A8%8B%E5%BA%8F%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%20if%E5%88%A4%E6%96%AD%E3%80%81switch%E5%88%86%E6%94%AF%E5%88%A4%E6%96%AD.html"/>
    <id>http://Aileen-zl.github.io/Java/程序流程控制（一）— if判断、switch分支判断.html</id>
    <published>2017-05-26T16:00:00.000Z</published>
    <updated>2017-06-30T12:28:50.993Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-if判断"><a href="#1-if判断" class="headerlink" title="1. if判断"></a><strong>1. if判断</strong></h3><blockquote>
<p><strong>语法：</strong><br>&#160;&#160;&#160;&#160;if( 条件判断表达式 ){<br>    &#160;&#160;&#160;&#160;&#160;&#160; 执行语句…<br>&#160;&#160;&#160;&#160;}</p>
</blockquote>
<font size="4">注意：if的判断的条件的结果一定是 bolean 类型。如果条件判断的表达式的返回值是 true，则可以执行 if 内部的语句，反之，就不执行。 </font>

<a id="more"></a>
<blockquote>
<p><strong>语法：</strong><br>&#160;&#160;&#160;&#160;if( 条件判断表达式 ){<br>&#160;&#160;&#160;&#160;&#160;&#160; 执行语句…<br>&#160;&#160;&#160;&#160;}else{<br>&#160;&#160;&#160;&#160;&#160;&#160; 执行语句…<br>&#160;&#160;&#160;&#160;}</p>
</blockquote>
<font size="4">注意：如果条件判断的表达式的返回值是 true，则可以执行 if 内部的语句，反之，就执行 else 中的语句。 </font>

<blockquote>
<p><strong>语法：</strong><br>&#160;&#160;&#160;&#160;if( 条件判断表达式 ){<br>&#160;&#160;&#160;&#160;&#160;&#160; 执行语句…<br>&#160;&#160;&#160;&#160;}else if( 条件判断表达式1 ){<br>&#160;&#160;&#160;&#160;&#160;&#160; 执行语句…<br>&#160;&#160;&#160;&#160;}else if( 条件判断表达式2 ){<br>&#160;&#160;&#160;&#160;&#160;&#160; …<br>&#160;&#160;&#160;&#160;}else{<br>&#160;&#160;&#160;&#160;&#160;&#160; 执行语句…<br>&#160;&#160;&#160;&#160;}</p>
</blockquote>
<font size="4">注意：多重 if，当遇到满足第一个表达式条件时，执行当前 if 语句，并且不会再向下执行。 </font>

<h3 id="2-switch分支判断"><a href="#2-switch分支判断" class="headerlink" title="2. switch分支判断"></a><strong>2. switch分支判断</strong></h3><blockquote>
<p><strong>语法：</strong><br>&#160;&#160;&#160;&#160;switch( 表达式 ){<br>&#160;&#160;&#160;&#160;&#160;&#160; case 常量1：<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; 执行语句1；<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; break；<br>&#160;&#160;&#160;&#160;&#160;&#160; case 常量2：<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; 执行语句2；<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; break；<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;……<br>&#160;&#160;&#160;&#160;&#160;&#160; default：<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; 执行语句n；<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; break；<br>&#160;&#160;&#160;&#160;}</p>
</blockquote>
<font size="4">注意：<br>&#160;&#160;&#160;&#160; case后边的这个常量要和表达式的结果做等值判断，如果判断相等，就执行它下面的语句。在执行 break 的时候跳出 switch；如果一个也没有匹配上，就执行 default 默认情况。<br>&#160;&#160;&#160;&#160; break 可以省略不会报错；但是要知道，如果省略就会穿透执行语句（不管是否能匹配上），直到遇到一个 break 才会跳出，所以一般情况下，我们不建议省略 break。<br></font>

<font size="4">举个例子：</font><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo1</span></span>&#123;	</div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">		</div><div class="line">			<span class="keyword">int</span> dj = <span class="number">1</span>;</div><div class="line">				</div><div class="line">			<span class="keyword">switch</span>(dj)&#123;</div><div class="line">					<span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">							System.out.println(<span class="string">"*"</span>);</div><div class="line">							<span class="comment">//break;</span></div><div class="line">					<span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">							System.out.println(<span class="string">"**"</span>);</div><div class="line">							<span class="comment">//break;</span></div><div class="line">					<span class="keyword">case</span> <span class="number">3</span>:</div><div class="line">							System.out.println(<span class="string">"***"</span>);</div><div class="line">							<span class="keyword">break</span>;</div><div class="line">					<span class="keyword">case</span> <span class="number">4</span>:</div><div class="line">							System.out.println(<span class="string">"****"</span>);</div><div class="line">							<span class="keyword">break</span>;</div><div class="line">					<span class="keyword">case</span> <span class="number">5</span>:</div><div class="line">							System.out.println(<span class="string">"*****"</span>);</div><div class="line">							<span class="keyword">break</span>;</div><div class="line">					<span class="keyword">default</span>:</div><div class="line">						System.out.println(<span class="string">"请重新输入..."</span>);</div><div class="line">					<span class="keyword">break</span>;		</div><div class="line">			&#125;	</div><div class="line">		&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 因为dj=1，所以输出的结果应该是“*”，但是在这里我们把“case 1”，“case 2”的“break;” 给注释掉了，所以最后的输出结果为：“*” “**” “***”</span></div></pre></td></tr></table></figure><br><br><font size="4">switch 和 if 的区别：</font><br><font size="4" color="red">&#160;&#160;&#160;&#160; if 可以做等值判断，也可以做区间判断；switch 只能做等值判断。<br></font>

<font size="4">举个例子吧：计算2017年的2月有多少天？</font>

<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo1</span></span>&#123;	</div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">		</div><div class="line">			<span class="keyword">int</span> year = <span class="number">2017</span>;</div><div class="line">			<span class="keyword">int</span> month = <span class="number">2</span>;</div><div class="line">			<span class="keyword">int</span> day = <span class="number">0</span>;</div><div class="line">		</div><div class="line">			<span class="keyword">switch</span>(month)&#123;</div><div class="line">					<span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">					<span class="keyword">case</span> <span class="number">3</span>:</div><div class="line">					<span class="keyword">case</span> <span class="number">5</span>:</div><div class="line">					<span class="keyword">case</span> <span class="number">7</span>:</div><div class="line">					<span class="keyword">case</span> <span class="number">8</span>:</div><div class="line">					<span class="keyword">case</span> <span class="number">10</span>:</div><div class="line">					<span class="keyword">case</span> <span class="number">12</span>:</div><div class="line">							day = <span class="number">31</span>;</div><div class="line">							<span class="keyword">break</span>;</div><div class="line">					<span class="keyword">case</span> <span class="number">4</span>:</div><div class="line">					<span class="keyword">case</span> <span class="number">6</span>:</div><div class="line">					<span class="keyword">case</span> <span class="number">9</span>:</div><div class="line">					<span class="keyword">case</span> <span class="number">11</span>:</div><div class="line">							day = <span class="number">30</span>;</div><div class="line">							<span class="keyword">break</span>;</div><div class="line">					<span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">							<span class="keyword">if</span>((year%<span class="number">400</span>) == <span class="number">0</span> || (year%<span class="number">4</span> == <span class="number">0</span>&amp;&amp; year%<span class="number">100</span> != <span class="number">0</span>))&#123;</div><div class="line">								day = <span class="number">29</span>;</div><div class="line">							&#125;<span class="keyword">else</span>&#123;</div><div class="line">								day = <span class="number">28</span>;</div><div class="line">							&#125;</div><div class="line">							<span class="keyword">break</span>;</div><div class="line">					<span class="keyword">default</span>:</div><div class="line">							System.out.println(<span class="string">"一年中没有这个月份"</span>);</div><div class="line">					<span class="keyword">break</span>;		</div><div class="line">			&#125;			</div><div class="line">			System.out.println(year + <span class="string">"年"</span>+ month+<span class="string">"月有"</span>+day+<span class="string">"天"</span>);</div><div class="line">		&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<font size="4">注意：<br>&#160;&#160;&#160;&#160; switch后边括号内的表达式的类型可以是：byte，short，int，char，<font color="red">string（jdk1.7以后才可以使用string类型）</font>;<br></font>

<p><font size="4">下面对string类型进行举例说明吧：</font><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo1</span></span>&#123;	</div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">		</div><div class="line">			String dj = <span class="string">"a"</span>;</div><div class="line">				</div><div class="line">			<span class="keyword">switch</span>(dj)&#123;</div><div class="line">					<span class="keyword">case</span> <span class="string">"a"</span>:</div><div class="line">							System.out.println(<span class="string">"*"</span>);</div><div class="line">							<span class="keyword">break</span>;</div><div class="line">					<span class="keyword">case</span> <span class="string">"b"</span>:</div><div class="line">							System.out.println(<span class="string">"**"</span>);</div><div class="line">							<span class="keyword">break</span>;</div><div class="line">					<span class="keyword">case</span> <span class="string">"c"</span>:</div><div class="line">							System.out.println(<span class="string">"***"</span>);</div><div class="line">							<span class="keyword">break</span>;</div><div class="line">					<span class="keyword">case</span> <span class="string">"d"</span>:</div><div class="line">							System.out.println(<span class="string">"****"</span>);</div><div class="line">							<span class="keyword">break</span>;</div><div class="line">					<span class="keyword">case</span> <span class="string">"e"</span>:</div><div class="line">							System.out.println(<span class="string">"*****"</span>);</div><div class="line">							<span class="keyword">break</span>;</div><div class="line">					<span class="keyword">default</span>:</div><div class="line">						System.out.println(<span class="string">"请重新输入..."</span>);</div><div class="line">					<span class="keyword">break</span>;		</div><div class="line">			&#125;	</div><div class="line">		&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 输出结果为：*</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      程序流程控制之if、switch判断
    
    </summary>
    
      <category term="Java" scheme="http://Aileen-zl.github.io/categories/Java/"/>
    
    
      <category term="流程控制" scheme="http://Aileen-zl.github.io/tags/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
    
      <category term="if判断" scheme="http://Aileen-zl.github.io/tags/if%E5%88%A4%E6%96%AD/"/>
    
      <category term="switch分支判断" scheme="http://Aileen-zl.github.io/tags/switch%E5%88%86%E6%94%AF%E5%88%A4%E6%96%AD/"/>
    
  </entry>
  
  <entry>
    <title>Java基础语法（五）—位运算符</title>
    <link href="http://Aileen-zl.github.io/Java/Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%EF%BC%88%E4%BA%94%EF%BC%89%E2%80%94%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6.html"/>
    <id>http://Aileen-zl.github.io/Java/Java基础语法（五）—位运算符.html</id>
    <published>2017-05-25T16:00:00.000Z</published>
    <updated>2017-06-30T12:32:30.065Z</updated>
    
    <content type="html"><![CDATA[<h3 id="5-位运算符"><a href="#5-位运算符" class="headerlink" title="5.位运算符"></a><strong>5.位运算符</strong></h3><p><strong>题外话：</strong>我们都知道，在计算机中，参与计算的都是二进制数据，而二进制数据又分为原码、反码、补码，运算的时候都是用<font color="red"><strong>补码</strong></font>来运算。</p>
<a id="more"></a>
<hr>
<h4 id="（1）-lt-lt-：将参与运算的二进制数据向-左-移动，在低位产生的空位用-0-来补齐。"><a href="#（1）-lt-lt-：将参与运算的二进制数据向-左-移动，在低位产生的空位用-0-来补齐。" class="headerlink" title="（1）&lt;&lt;：将参与运算的二进制数据向 左 移动，在低位产生的空位用 0 来补齐。"></a><strong>（1）&lt;&lt;：将参与运算的二进制数据向 左 移动，在低位产生的空位用 0 来补齐。</strong></h4><blockquote>
<font size="4"><strong>注意：</strong>在java中，整数的默认类型为 int 型，也就是32位，而为了在下文中叙述方便，我就使用8位的byte型了。</font>


</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo1</span></span>&#123;	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">		</div><div class="line">		<span class="keyword">byte</span> a = <span class="number">7</span>;</div><div class="line">		<span class="comment">// 把a变量的二进制的值左移2位</span></div><div class="line">		System.out.println(a &lt;&lt; <span class="number">2</span>); <span class="comment">// 输出结果：28</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<table><tr><td>整数 7 的二进制形式：</td><td bgcolor="CCCCCC">0000</td><td bgcolor="CCCCCC">0111</td></tr><tr><br><td>整数 7 的二进制左移两位：</td><td bgcolor="CCCCCC">0001</td><td bgcolor="CCCCCC">1100</td></tr></table>

<hr>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo1</span></span>&#123;	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">		</div><div class="line">		<span class="keyword">byte</span> a = -<span class="number">7</span>;</div><div class="line">		<span class="comment">// 把a变量的二进制的值左移2位</span></div><div class="line">		System.out.println(a &lt;&lt; <span class="number">2</span>); <span class="comment">// 输出结果：-28</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<table><tr><td>-7 原码：</td><td bgcolor="CCCCCC">1000</td><td bgcolor="CCCCCC">0111</td></tr><tr><td>&#160;&#160;&#160;&#160;反码：</td><td bgcolor="CCCCCC">1111</td><td bgcolor="CCCCCC">1000</td></tr><tr><td>&#160;&#160;&#160;&#160;补码：</td><td bgcolor="CCCCCC">1111</td><td bgcolor="CCCCCC">1001</td></tr><tr><td>&#160;&#160;&#160;&#160;补码：（左移之后）</td><td bgcolor="CCCCCC">1110</td><td bgcolor="CCCCCC">0100</td></tr><tr><td>&#160;&#160;&#160;&#160;反码：</td><td bgcolor="CCCCCC">1110</td><td bgcolor="CCCCCC">0011</td></tr><tr><td>&#160;&#160;&#160;&#160;原码：</td><td bgcolor="CCCCCC">1001</td><td bgcolor="CCCCCC">1100</td></tr></table>

<blockquote>
<p>&#160;&#160;&#160;&#160;&#160;&#160;<font size="4">在这里需要简单解释一下，因为计算机的运算都是以补码的形式进行，而最高位的 0 或 1 代表的是符号位正或负，（以前不清楚这一点，正数的时候还好，一旦遭遇负数，脑子一团浆糊）。那么我们十进制的-7在进行移位运算之前，需要先转换成补码形式，然后才可以移位，（不要觉得我们进行到这里就结束了哈）实际上我们在控制台输出的还是 十进制的数，所以还要将移位之后的补码再转换成原码才行。</font><br>&#160;&#160;&#160;&#160;&#160;&#160;<font size="4">原码、反码、补码之间的转换我在之前的《java基础语法（二）》中就有过介绍，在这里我再说明一下吧：</font><br>&#160;&#160;&#160;&#160;&#160;&#160;<font size="4">正数：原码=反码=补码</font><br>&#160;&#160;&#160;&#160;&#160;&#160;<font size="4">负数：<font color="red">原码变反码</font>：最高位符号位不变，其他数值位 0变1、1变0。</font><br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<font color="red" size="4">反码变补码</font><font size="4">：反码加1即可得。</font></p>
</blockquote>
<hr>
<h4 id="（2）-gt-gt-：（带符号右移）将参与运算的二进制数据向右移动，在高位产生的空位：如果高位是0，就用0补齐；如果高位是1，就用1补齐。"><a href="#（2）-gt-gt-：（带符号右移）将参与运算的二进制数据向右移动，在高位产生的空位：如果高位是0，就用0补齐；如果高位是1，就用1补齐。" class="headerlink" title="（2）&gt;&gt;：（带符号右移）将参与运算的二进制数据向右移动，在高位产生的空位：如果高位是0，就用0补齐；如果高位是1，就用1补齐。"></a><strong>（2）&gt;&gt;：（带符号右移）将参与运算的二进制数据向右移动，在高位产生的空位：如果高位是0，就用0补齐；如果高位是1，就用1补齐。</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo1</span></span>&#123;	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">		</div><div class="line">		<span class="keyword">byte</span> a = <span class="number">7</span>;</div><div class="line">		<span class="comment">// 把a变量的二进制的值右移2位</span></div><div class="line">		System.out.println(a &gt;&gt; <span class="number">2</span>); <span class="comment">// 输出结果：1</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<table><tr><td>整数 7 的二进制形式：</td><td bgcolor="CCCCCC">0000</td><td bgcolor="CCCCCC">0111</td></tr><br><tr><td>整数 7 的二进制右移两位：</td><td bgcolor="CCCCCC">0000</td><td bgcolor="CCCCCC">0001</td></tr></table>

<hr>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo1</span></span>&#123;	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">		</div><div class="line">		<span class="keyword">byte</span> a = -<span class="number">7</span>;</div><div class="line">		<span class="comment">// 把a变量的二进制的值右移2位</span></div><div class="line">		System.out.println(a &gt;&gt; <span class="number">2</span>); <span class="comment">// 输出结果：-2</span></div><div class="line">		</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<table><br><tr><td>-7 原码：</td><td bgcolor="CCCCCC">1000</td><td bgcolor="CCCCCC">0111</td></tr><tr><td>&#160;&#160;&#160;&#160;反码：</td><td bgcolor="CCCCCC">1111</td><td bgcolor="CCCCCC">1000</td></tr><tr><td>&#160;&#160;&#160;&#160;补码：</td><td bgcolor="CCCCCC">1111</td><td bgcolor="CCCCCC">1001</td></tr><tr><td>&#160;&#160;&#160;&#160;补码：（右移之后）</td><td bgcolor="CCCCCC">1111</td><td bgcolor="CCCCCC">1110</td></tr><tr><td>&#160;&#160;&#160;&#160;反码：</td><td bgcolor="CCCCCC">1111</td><td bgcolor="CCCCCC">1101</td></tr><tr><td>&#160;&#160;&#160;&#160;原码：</td><td bgcolor="CCCCCC">1000</td><td bgcolor="CCCCCC">0010</td></tr></table>

<blockquote>
<font size="4">负数的带符号右移运算的原理同左移原理相同，这里就不赘述了。</font>

</blockquote>
<hr>
<h4 id="（3）-gt-gt-gt-：（无符号右移）将参与运算的二进制数据向右移动，在高位所产生的空位用-0-补齐。"><a href="#（3）-gt-gt-gt-：（无符号右移）将参与运算的二进制数据向右移动，在高位所产生的空位用-0-补齐。" class="headerlink" title="（3）&gt;&gt;&gt;：（无符号右移）将参与运算的二进制数据向右移动，在高位所产生的空位用 0 补齐。"></a><strong>（3）&gt;&gt;&gt;：（无符号右移）将参与运算的二进制数据向右移动，在高位所产生的空位用 0 补齐。</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo1</span></span>&#123;	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">		</div><div class="line">		<span class="keyword">byte</span> a = <span class="number">7</span>;</div><div class="line">		System.out.println(a &gt;&gt;&gt; <span class="number">2</span>); <span class="comment">// 输出结果：1	</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<font size="4">正数的无符号右移和正数的带符号右移的结果相同。所以相对来说，正数的无符号右移其实没有啥太大的意义。</font>

</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo1</span></span>&#123;	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">		</div><div class="line">		<span class="keyword">int</span> a = -<span class="number">7</span>;</div><div class="line">		System.out.println(a &gt;&gt;&gt; <span class="number">2</span>); <span class="comment">// 输出结果：1073741822</span></div><div class="line">		</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<table><tr><br><td>-7原码：</td><td bgcolor="CCCCCC">1000 0000</td><td bgcolor="CCCCCC">0000 0000</td><td bgcolor="CCCCCC">0000 0000</td><td bgcolor="CCCCCC">0000 0111</td></tr><tr><td>&#160;&#160;&#160;&#160;反码：</td><td bgcolor="CCCCCC">1111 1111</td><td bgcolor="CCCCCC">1111 1111</td><td bgcolor="CCCCCC">1111 1111</td><td bgcolor="CCCCCC">1111 1000</td></tr><tr><td>&#160;&#160;&#160;&#160;补码：</td><td bgcolor="CCCCCC">1111 1111</td><td bgcolor="CCCCCC">1111 1111</td><td bgcolor="CCCCCC">1111 1111</td><td bgcolor="CCCCCC">1111 1001</td></tr><tr><td>&#160;&#160;&#160;&#160;补码：（右移之后）</td><td bgcolor="CCCCCC">0011 1111</td><td bgcolor="CCCCCC">1111 1111</td><td bgcolor="CCCCCC">1111 1111</td><td bgcolor="CCCCCC">1111 1110</td></tr></table>

<blockquote>
<font size="4">注意：无符号右移只是对32位和64位的值有意义。上图中，右移后的补码最高符号位为0，所以为正数，所以原码就是它本身，那么转换成十进制之后的值为：1073741822</font>


</blockquote>
]]></content>
    
    <summary type="html">
    
      位运算符
    
    </summary>
    
      <category term="Java" scheme="http://Aileen-zl.github.io/categories/Java/"/>
    
    
      <category term="java" scheme="http://Aileen-zl.github.io/tags/java/"/>
    
      <category term="位运算符" scheme="http://Aileen-zl.github.io/tags/%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    
      <category term="带符号右移" scheme="http://Aileen-zl.github.io/tags/%E5%B8%A6%E7%AC%A6%E5%8F%B7%E5%8F%B3%E7%A7%BB/"/>
    
      <category term="无符号右移" scheme="http://Aileen-zl.github.io/tags/%E6%97%A0%E7%AC%A6%E5%8F%B7%E5%8F%B3%E7%A7%BB/"/>
    
      <category term="左移" scheme="http://Aileen-zl.github.io/tags/%E5%B7%A6%E7%A7%BB/"/>
    
  </entry>
  
  <entry>
    <title>Java基础语法（四）—运算符之逻辑运算符</title>
    <link href="http://Aileen-zl.github.io/Java/Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%EF%BC%88%E5%9B%9B%EF%BC%89%E2%80%94%E8%BF%90%E7%AE%97%E7%AC%A6%E4%B9%8B%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6.html"/>
    <id>http://Aileen-zl.github.io/Java/Java基础语法（四）—运算符之逻辑运算符.html</id>
    <published>2017-05-24T16:00:00.000Z</published>
    <updated>2017-06-30T12:32:57.499Z</updated>
    
    <content type="html"><![CDATA[<h3 id="4-逻辑运算符"><a href="#4-逻辑运算符" class="headerlink" title="4.逻辑运算符"></a><strong>4.逻辑运算符</strong></h3><blockquote>
<p><strong>&amp;：</strong>当多个表达式进行运算的时候，只有所有的表达式计算结果都是 true 时，整体的结果才是 true ；</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">表达式1</th>
<th style="text-align:center">表达式2</th>
<th style="text-align:center">结果</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">true</td>
<td style="text-align:center">true</td>
<td style="text-align:center">true</td>
</tr>
<tr>
<td style="text-align:center">true</td>
<td style="text-align:center">false</td>
<td style="text-align:center">false</td>
</tr>
<tr>
<td style="text-align:center">false</td>
<td style="text-align:center">true</td>
<td style="text-align:center">false</td>
</tr>
<tr>
<td style="text-align:center">false</td>
<td style="text-align:center">false</td>
<td style="text-align:center">false</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<blockquote>
<p><strong>注意：</strong> 只要有一个表达式是 false，那么整体就是 false；但是有一点需要注意的是，&amp;不管第一个表达式是不是false，所有的表达式都会全部执行。（<font color="red">&amp; 两边的表达式都要参与计算</font>）举个例来说：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo1</span></span>&#123;	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">		</div><div class="line">		<span class="keyword">int</span> a = <span class="number">50</span>;</div><div class="line">		<span class="keyword">int</span> b = <span class="number">30</span>;		</div><div class="line">		System.out.println((a &gt; <span class="number">60</span>)&amp;(b++ &gt; <span class="number">60</span>)); </div><div class="line">		System.out.println(b); <span class="comment">// b = 31</span></div><div class="line">		</div><div class="line">		<span class="comment">// 从最后输出的 b 的值为 31 可以看出，在这里每一个表达式（a &gt; 60 和 b++ &gt; 60）都会执行</span></div><div class="line">		</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<blockquote>
<p><strong>|（或）：</strong>当多个表达式进行运算的时候，只有所有的表达式计算结果都是 false 时，整体结果才是 false ；</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">表达式1</th>
<th style="text-align:center">表达式2</th>
<th style="text-align:center">结果</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">true</td>
<td style="text-align:center">true</td>
<td style="text-align:center">true</td>
</tr>
<tr>
<td style="text-align:center">true</td>
<td style="text-align:center">false</td>
<td style="text-align:center">true</td>
</tr>
<tr>
<td style="text-align:center">false</td>
<td style="text-align:center">true</td>
<td style="text-align:center">true</td>
</tr>
<tr>
<td style="text-align:center">false</td>
<td style="text-align:center">false</td>
<td style="text-align:center">false</td>
</tr>
</tbody>
</table>
<blockquote>
<p><strong>注意：</strong> 只要有一个表达式是 true，那么整体就是 true；这里也同&amp;一样，| 不管第一个表达式是不是 true，所有的表达式都会全部执行。。（<font color="red">| 两边的表达式也都要参与计算</font>）</p>
</blockquote>
<hr>
<blockquote>
<p><strong>&amp;&amp;：</strong> &amp;&amp; 同 &amp; 一样，但是他们之间的区别就在于：&amp;&amp; 如果发现第一个表达式就是 false 时，那么就不会再进行剩余的表达式的计算了。也就是说，&amp;&amp; 用于连接多个表达式的判断，如果第一个表达式能决定整个表达式的结果，第二个表达式就不用计算了。</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">表达式1</th>
<th style="text-align:center">表达式2</th>
<th style="text-align:center">结果</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">true</td>
<td style="text-align:center">true</td>
<td style="text-align:center">true</td>
</tr>
<tr>
<td style="text-align:center">true</td>
<td style="text-align:center">false</td>
<td style="text-align:center">false</td>
</tr>
<tr>
<td style="text-align:center">false</td>
<td style="text-align:center">true</td>
<td style="text-align:center">false</td>
</tr>
<tr>
<td style="text-align:center">false</td>
<td style="text-align:center">false</td>
<td style="text-align:center">false</td>
</tr>
</tbody>
</table>
<hr>
<blockquote>
<p><strong>||：</strong> || 同 | 一样，但是他们之间的区别就在于：|| 如果发现第一个表达式就是 true 时，那么就不会再进行剩余的表达式的计算了。也就是说，|| 用于连接多个表达式的判断，如果第一个表达式能决定整个表达式的结果，第二个表达式就不用计算了。</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">表达式1</th>
<th style="text-align:center">表达式2</th>
<th style="text-align:center">结果</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">true</td>
<td style="text-align:center">true</td>
<td style="text-align:center">true</td>
</tr>
<tr>
<td style="text-align:center">true</td>
<td style="text-align:center">false</td>
<td style="text-align:center">true</td>
</tr>
<tr>
<td style="text-align:center">false</td>
<td style="text-align:center">true</td>
<td style="text-align:center">true</td>
</tr>
<tr>
<td style="text-align:center">false</td>
<td style="text-align:center">false</td>
<td style="text-align:center">false</td>
</tr>
</tbody>
</table>
<hr>
<blockquote>
<p><strong>^（异或）：</strong>用于连接多个表达式的判断，如果两个表达式相同就是 false，不同就是 true。（<font color="red">两边都参与计算</font>）</p>
</blockquote>
<hr>
<blockquote>
<p><strong>!（取反）：</strong> 如果对于表达式取反，需要用括号括上。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      运算符之逻辑运算符
    
    </summary>
    
      <category term="Java" scheme="http://Aileen-zl.github.io/categories/Java/"/>
    
    
      <category term="java" scheme="http://Aileen-zl.github.io/tags/java/"/>
    
      <category term="java基础语法" scheme="http://Aileen-zl.github.io/tags/java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    
      <category term="逻辑运算符" scheme="http://Aileen-zl.github.io/tags/%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    
  </entry>
  
  <entry>
    <title>Java基础语法（三）—运算符</title>
    <link href="http://Aileen-zl.github.io/Java/Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E8%BF%90%E7%AE%97%E7%AC%A6.html"/>
    <id>http://Aileen-zl.github.io/Java/Java基础语法（三）—运算符.html</id>
    <published>2017-05-23T16:00:00.000Z</published>
    <updated>2017-06-30T12:31:27.466Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、运算符"><a href="#一、运算符" class="headerlink" title="一、运算符"></a><strong>一、运算符</strong></h2><h3 id="1-算数运算符"><a href="#1-算数运算符" class="headerlink" title="1.算数运算符"></a><strong>1.算数运算符</strong></h3><h4 id="（1）四则运算"><a href="#（1）四则运算" class="headerlink" title="（1）四则运算"></a><strong>（1）四则运算</strong></h4><blockquote>
<p>加法：+ &#160;&#160;&#160;&#160; 减法：- &#160;&#160;&#160;&#160; 乘法：* &#160;&#160;&#160;&#160; 取整：/ &#160;&#160;&#160;&#160; 取余：% </p>
</blockquote>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo1</span></span>&#123;	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">		</div><div class="line">		<span class="keyword">int</span> a = <span class="number">100</span>;</div><div class="line">		<span class="keyword">int</span> b = <span class="number">200</span>;</div><div class="line">		</div><div class="line">		<span class="keyword">int</span> i1 = a + b; <span class="comment">// 加法</span></div><div class="line">		System.out.println(<span class="string">"a+b="</span>+i1); <span class="comment">// i1 = 300</span></div><div class="line">		</div><div class="line">		<span class="keyword">int</span> i2 = a - b; <span class="comment">// 减法</span></div><div class="line">		System.out.println(<span class="string">"a-b="</span>+i2); <span class="comment">// i2 = -100</span></div><div class="line">		</div><div class="line">		<span class="keyword">int</span> i3 = a * b; <span class="comment">// 乘法</span></div><div class="line">		System.out.println(<span class="string">"a*b="</span>+i3); <span class="comment">// i3 = 20000</span></div><div class="line">		</div><div class="line">		<span class="keyword">int</span> i4 = a / b; <span class="comment">// 取整</span></div><div class="line">		System.out.println(<span class="string">"a/b="</span>+i4); <span class="comment">// i4 = 0</span></div><div class="line">		</div><div class="line">		<span class="keyword">int</span> i5 = a % b; <span class="comment">// 取余</span></div><div class="line">		System.out.println(<span class="string">"a%b="</span>+i5); <span class="comment">// i5 = 100</span></div><div class="line">		</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="（2）自增、自减（后-、后-）"><a href="#（2）自增、自减（后-、后-）" class="headerlink" title="（2）自增、自减（后++、后- -）"></a><strong>（2）自增、自减（后++、后- -）</strong></h4><blockquote>
<p>后加加（后减减）：先赋值，再运算；</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo1</span></span>&#123;	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">		</div><div class="line">		<span class="keyword">int</span> i1 = <span class="number">1</span>;</div><div class="line">		i1++; <span class="comment">// 对变量先进行赋值，在进行加1运算</span></div><div class="line">		System.out.println(<span class="string">"后加加："</span> + i1); <span class="comment">// i1 = 2</span></div><div class="line">		</div><div class="line">		<span class="keyword">int</span> i2 = <span class="number">5</span>;</div><div class="line">		i2--; <span class="comment">// 对变量先赋值，在进行减1运算</span></div><div class="line">		System.out.println(<span class="string">"后减减："</span> + i2); <span class="comment">// i2 = 4</span></div><div class="line">		</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="（3）自增、自减（前-、前-）"><a href="#（3）自增、自减（前-、前-）" class="headerlink" title="（3）自增、自减（前++、前- -）"></a><strong>（3）自增、自减（前++、前- -）</strong></h4><blockquote>
<p>前加加（前减减）：先运算，再赋值</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo1</span></span>&#123;	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">	</div><div class="line">		<span class="keyword">int</span> i3 = <span class="number">1</span>;</div><div class="line">		++i3; <span class="comment">// 对变量先进行加1运算，再把所得结果赋值</span></div><div class="line">		System.out.println(<span class="string">"前加加后："</span> + i3); <span class="comment">// i3 = 2</span></div><div class="line">		</div><div class="line">		<span class="keyword">int</span> i4 = <span class="number">5</span>;</div><div class="line">		--i4; <span class="comment">// 对变量先进行减1运算，再把所得结果赋值</span></div><div class="line">		System.out.println(<span class="string">"前减减后："</span> + i4); <span class="comment">// i4 = 4</span></div><div class="line">		</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>注意：</strong><br>&#160;&#160;&#160;&#160;当后加加（后减减）和其他代码在同一行的时候，先使用加加（减减）之前的值；如果不在同一行，后面的一行就会使用加加（减减）之后的值。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo1</span></span>&#123;	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">	</div><div class="line">		<span class="keyword">int</span> i5 = <span class="number">10</span>;</div><div class="line">		System.out.println(<span class="string">"后加加与其他代码同行："</span> + (i5++)); <span class="comment">// 输出结果：10</span></div><div class="line">		System.out.println(i5); <span class="comment">// 输出结果：11</span></div><div class="line">		</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>注意：</strong><br>&#160;&#160;&#160;&#160;当前加加（前减减）和其他代码在同一行的时候，先进行加1（减1）运算，再使用运算后的值；</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo1</span></span>&#123;	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">	</div><div class="line">		<span class="keyword">int</span> i6 = <span class="number">15</span>;</div><div class="line">		System.out.println(<span class="string">"前加加与其他代码同行："</span> + (++i6)); <span class="comment">// 输出结果：16</span></div><div class="line">		System.out.println(i6); <span class="comment">// 输出结果：16	</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-赋值运算符"><a href="#2-赋值运算符" class="headerlink" title="2.赋值运算符"></a><strong>2.赋值运算符</strong></h3><p>&#160;&#160;&#160;&#160; =：赋值<br>&#160;&#160;&#160;&#160; +=：比如 a += 2; 相当于 a = a + 2;<br>&#160;&#160;&#160;&#160; -=：比如 a -= 2; 相当于 a = a - 2;<br>&#160;&#160;&#160;&#160; /=：同理<br>&#160;&#160;&#160;&#160; %=：同理<br>&#160;&#160;&#160;&#160; *=：同理</p>
<h3 id="3-比较运算符"><a href="#3-比较运算符" class="headerlink" title="3.比较运算符"></a><strong>3.比较运算符</strong></h3><p>&#160;&#160;&#160;&#160; <strong>==：</strong> 判断双等号两边是否相等；</p>
<p>&#160;&#160;&#160;&#160; <strong>不等于：</strong>！=</p>
<p>&#160;&#160;&#160;&#160; <strong>大于：</strong> &gt;</p>
<p>&#160;&#160;&#160;&#160; <strong>大于等于：</strong> &gt;=</p>
<p>&#160;&#160;&#160;&#160; <strong>小于：</strong> &lt;</p>
<p>&#160;&#160;&#160;&#160; <strong>小于等于：</strong> &lt;=</p>
]]></content>
    
    <summary type="html">
    
      运算符
    
    </summary>
    
      <category term="Java" scheme="http://Aileen-zl.github.io/categories/Java/"/>
    
    
      <category term="java" scheme="http://Aileen-zl.github.io/tags/java/"/>
    
      <category term="java基础语法" scheme="http://Aileen-zl.github.io/tags/java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    
      <category term="算数运算符" scheme="http://Aileen-zl.github.io/tags/%E7%AE%97%E6%95%B0%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    
      <category term="比较运算符" scheme="http://Aileen-zl.github.io/tags/%E6%AF%94%E8%BE%83%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    
  </entry>
  
  <entry>
    <title>Java基础语法（二）—基本数据类型转换</title>
    <link href="http://Aileen-zl.github.io/Java/Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2.html"/>
    <id>http://Aileen-zl.github.io/Java/Java基础语法（二）—基本数据类型转换.html</id>
    <published>2017-05-22T16:00:00.000Z</published>
    <updated>2017-06-30T12:32:08.648Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、基本数据类型转换"><a href="#一、基本数据类型转换" class="headerlink" title="一、基本数据类型转换"></a><strong>一、基本数据类型转换</strong></h2><p>&#160;&#160;&#160;&#160; 8种基本数据类型除了boolean类型外，都可相互转换。</p>
<h3 id="1-自动类型转换"><a href="#1-自动类型转换" class="headerlink" title="1.自动类型转换"></a><strong>1.自动类型转换</strong></h3><p> &#160;&#160;&#160;&#160;变量在做运算的时候，可能产生溢出的情况，那么此时java语言将采用自动类型转换的方式来处理。<br> &#160;&#160;&#160;&#160;小空间的数据类型和大空间的数据类型的数运算时，会向大空间的数据类型转换。</p>
<a id="more"></a>
<blockquote>
<p>byte–&gt;short–&gt;int–&gt;long–&gt;float–&gt;double</p>
</blockquote>
<p>(1) byte、short、char类型在做计算的时候会自动的把数据类型提升为 int 型<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo1</span></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">		<span class="comment">//byte在做运算的时候会自动的提升成int型</span></div><div class="line">		<span class="keyword">byte</span> a = <span class="number">16</span>;</div><div class="line">		<span class="comment">//错误：byte b = a + 1;</span></div><div class="line">		<span class="keyword">int</span> b = a + <span class="number">1</span>;</div><div class="line">		System.out.println(b);</div><div class="line"></div><div class="line">		<span class="comment">//char类型的数据在参与运算的时候，每一个char背后都对应一个数值类型ASCII码，参与计算的是ASCII码</span></div><div class="line">		<span class="keyword">char</span> c = <span class="string">'a'</span>; <span class="comment">//这里的字符a对应的十进制数为97</span></div><div class="line">		<span class="keyword">int</span> d = c + <span class="number">1</span>;</div><div class="line">		System.out.println(d);</div><div class="line">		&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>(2) int 类型和其他的数值计算时，也会溢出，但int不会提升 而是直接损失精度<br>   <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo1</span></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">	</div><div class="line">		<span class="comment">//int一旦达到最大值就会损失精度</span></div><div class="line">		<span class="keyword">int</span> e = <span class="number">2147483647</span>; <span class="comment">//2147483647 为int的最大值</span></div><div class="line">		<span class="comment">//int不能提升成long</span></div><div class="line">		<span class="keyword">long</span> f = e + <span class="number">1</span>;</div><div class="line">		System.out.println(f); <span class="comment">//f = -2147483648</span></div><div class="line">		&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p> &#160;&#160;&#160;&#160; &#160;&#160;&#160;&#160; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;int 为4个字节，所以int 的最大值为：<br>    &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; &#160;&#160;&#160;&#160; &#160;&#160;&#160;&#160;0111 1111   1111 1111   1111 1111   1111 1111<brbr>  &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; &#160;&#160;&#160;&#160; &#160;&#160;&#160;&#160;1000 0000   0000 0000   0000 0000   0000 0000</p>
<p>(3) 任何的整数类型和 long 类型做运算都会转换成 long 类型<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo1</span></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">	</div><div class="line">		<span class="keyword">long</span> l1 = <span class="number">200</span>; </div><div class="line">		<span class="keyword">byte</span> a = <span class="number">10</span>;</div><div class="line">		<span class="keyword">long</span> l2 = l1 + a;</div><div class="line">		System.out.println(l2); <span class="comment">// l2 = 210</span></div><div class="line">		&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>(4) 常量在做运算的时候，只要不超出定义的数据类型的范围就不会报错，不会发生数据类型的自动提升<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo1</span></span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">	<span class="comment">//这是不报错的情况</span></div><div class="line">	<span class="keyword">byte</span> b1 = <span class="number">3</span> + <span class="number">20</span>;</div><div class="line">	System.out.println(b1); <span class="comment">// b1 = 23</span></div><div class="line"></div><div class="line">	<span class="comment">//这是报错的情况</span></div><div class="line">	<span class="keyword">byte</span> b2 = <span class="number">127</span> + <span class="number">1</span>; <span class="comment">// 会造成溢出</span></div><div class="line">	System.out.println(b2);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>(5) float 类型（或double类型）和常量计算，会自动转换成 float 类型（或double类型）<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo1</span></span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">	<span class="keyword">float</span> f1 = <span class="number">15.3f</span>;</div><div class="line">	<span class="keyword">float</span> f2 = f1 + <span class="number">1</span>;</div><div class="line">	System.out.println(f2); <span class="comment">// f2 = 16.3</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>(6) float 类型和 float 类型计算，不会有数据类型的提升<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo1</span></span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">	<span class="keyword">float</span> f1 = <span class="number">15.3f</span>;</div><div class="line">	<span class="keyword">float</span> f2 = <span class="number">10.0f</span>;</div><div class="line">	<span class="keyword">float</span> f3 = f1 + f2;</div><div class="line">	System.out.println(f3); <span class="comment">// f3 = 25.3</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>(7) float 类型（或者double类型）和任何整数类型计算，都会转换成 float类型（或者double类型）<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Demo1</span></span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">	<span class="keyword">byte</span> b = <span class="number">100</span>;</div><div class="line">	<span class="keyword">short</span> s = <span class="number">20</span>;</div><div class="line">	<span class="keyword">int</span> i = <span class="number">40</span>;</div><div class="line">	<span class="keyword">long</span> l = <span class="number">100</span>;</div><div class="line">	<span class="keyword">float</span> f = <span class="number">13.2f</span>;</div><div class="line">	</div><div class="line">	<span class="keyword">float</span> f1 = f + b;</div><div class="line">	System.out.println(f1); <span class="comment">// f1 = 113.2</span></div><div class="line">	</div><div class="line">	<span class="keyword">float</span> f2 = f + s;</div><div class="line">	System.out.println(f2); <span class="comment">// f2 = 33.2</span></div><div class="line"></div><div class="line">	<span class="keyword">float</span> f3 = f + i;</div><div class="line">	System.out.println(f3); <span class="comment">// f3= 53.2</span></div><div class="line"></div><div class="line">	<span class="keyword">float</span> f4 = f + l;</div><div class="line">	System.out.println(f4); <span class="comment">// f4 = 113.2</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>(8) double 类型和 float 类型计算，会自动转换成 double 类型</p>
<h3 id="2-强制类型转换"><a href="#2-强制类型转换" class="headerlink" title="2.强制类型转换"></a><strong>2.强制类型转换</strong></h3><p> &#160;&#160;&#160;&#160;大空间的数据类型向小空间的数据类型去转换。<br> &#160;&#160;&#160;&#160;语法：&lt;目标数据类型&gt;变量名</p>
<font color="red">(1) int型转换为byte型</font>

  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">// 数值8是既在int范围里，也在byte范围里，所以转换之后不会有啥问题</span></div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo1</span></span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">	<span class="comment">// 把int型强制转换成byte型</span></div><div class="line">	<span class="keyword">int</span> i = <span class="number">8</span>;</div><div class="line">	<span class="keyword">byte</span> b = (<span class="keyword">byte</span>)i;</div><div class="line">	System.out.println(b); <span class="comment">// b= 8</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>转换原理：</strong><br> &#160;&#160;&#160;&#160;int 类型的8：&#160;&#160;&#160;&#160;&#160;&#160;00000000   00000000   00000000   00001000<br> &#160;&#160;&#160;&#160;short 类型的8：&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;00000000   00001000<br> &#160;&#160;&#160;&#160;byte 类型的8：&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;00001000<br> &#160;&#160;&#160;&#160;通过观察截取之后的二进制数 0000 1000 最高位符号位是0，所以这是一个正数，而计算机中所有的数据都是以补码的形式出现的，所以要计算它的补码；<br> &#160;&#160;&#160;&#160;正数：原码 = 反码 = 补码<br> &#160;&#160;&#160;&#160;最终看到的结果还是：0000 1000（最高位符号位不运算，数值位转化为十进制的8，因0为正，所以为+8）</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">// 数值130是只在int范围里，不在byte范围里，所以这里强制转换之后会损失精度</span></div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo1</span></span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">	<span class="comment">// 把int型强制转换成byte型</span></div><div class="line">	<span class="keyword">int</span> i = <span class="number">130</span>;</div><div class="line">	<span class="keyword">byte</span> b = (<span class="keyword">byte</span>)i;</div><div class="line">	System.out.println(b); <span class="comment">// b = -126</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>转换原理：</strong><br>&#160;&#160;&#160;&#160; 数据130是int类型的十进制数据；<br>&#160;&#160;&#160;&#160; 第一步：十进制的130转换成二进制数据 1000 0010；<br>&#160;&#160;&#160;&#160; 第二步：占4个字节的int型，做截取的过程如下：<br>&#160;&#160;&#160;&#160; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;int 类型的130：&#160;&#160;&#160;&#160;&#160;00000000   00000000   00000000   10000010<br>&#160;&#160;&#160;&#160; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;byte 类型的130：&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;10000010<br>&#160;&#160;&#160;&#160; 通过观察最高位符号是1，所以这是一个负数，而计算机中所有的数据都是以补码的形式出现的，所以要算它的补码；<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; 原码：1000 0010（原码变反码：最高位符号位不变，其他数值位0变1，1变0）<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; 反码：1111 1101（反码变补码：反码加1即可得）<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; 补码：1111 1110<br>&#160;&#160;&#160;&#160; 最终看到的结果就是：1111 1110（最高位是符号位不运算，数值位转化为十进制得126，因1为负，所以为-126）</p>
<p><font color="red">(2) float型转换为int、byte、short、long型，都是一样的（下面以int为例）</font><br> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Demo1</span></span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">	<span class="comment">// 小数强制转换为整数后，会舍弃小数位</span></div><div class="line">	<span class="keyword">float</span> f = <span class="number">12.5f</span>;</div><div class="line">	<span class="keyword">int</span> i1 = (<span class="keyword">int</span>)f;</div><div class="line">	System.out.println(i1); <span class="comment">// i1 = 12</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><font color="red">(3) double 类型转化成 float类型</font><br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">   <span class="class"><span class="keyword">class</span> <span class="title">Demo1</span></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">		<span class="comment">// double数据类型转换成float类型</span></div><div class="line">		<span class="keyword">double</span> d = <span class="number">20.3</span>;</div><div class="line">		<span class="keyword">float</span> f = (<span class="keyword">float</span>)d; </div><div class="line">		System.out.println(f); <span class="comment">// f = 20.3</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      基本数据类型转换
    
    </summary>
    
      <category term="Java" scheme="http://Aileen-zl.github.io/categories/Java/"/>
    
    
      <category term="java" scheme="http://Aileen-zl.github.io/tags/java/"/>
    
      <category term="自动类型转换" scheme="http://Aileen-zl.github.io/tags/%E8%87%AA%E5%8A%A8%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
    
      <category term="强制类型转换" scheme="http://Aileen-zl.github.io/tags/%E5%BC%BA%E5%88%B6%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
    
      <category term="基本数据类型转换" scheme="http://Aileen-zl.github.io/tags/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
    
  </entry>
  
  <entry>
    <title>Java基础语法（一）—标识符、关键字、常变量、数据类型</title>
    <link href="http://Aileen-zl.github.io/Java/Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E6%A0%87%E8%AF%86%E7%AC%A6%E3%80%81%E5%85%B3%E9%94%AE%E5%AD%97%E3%80%81%E5%B8%B8%E5%8F%98%E9%87%8F%E3%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html"/>
    <id>http://Aileen-zl.github.io/Java/Java基础语法（一）—标识符、关键字、常变量、数据类型.html</id>
    <published>2017-05-21T16:00:00.000Z</published>
    <updated>2017-06-30T12:31:04.907Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、标识符"><a href="#一、标识符" class="headerlink" title="一、标识符"></a><strong>一、标识符</strong></h2><h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a><strong>1. 定义</strong></h3><blockquote>
<p>在java语言中，对各种变量、方法和类等要素命名时所使用的字符序列就是标识符。</p>
</blockquote>
<a id="more"></a>
<h3 id="2-使用规范"><a href="#2-使用规范" class="headerlink" title="2. 使用规范"></a><strong>2. 使用规范</strong></h3><blockquote>
<p>（1） 使用26个英文字母大小写，数字0-9，符号 _ 和 $<br>（2） 数字不能开头，且严格区分大小写</p>
</blockquote>
<h3 id="3-标识符规范"><a href="#3-标识符规范" class="headerlink" title="3. 标识符规范"></a><strong>3. 标识符规范</strong></h3><p>类名和接口：<br>&#160;&#160;&#160;&#160;首字符大写，如果是多个单词，每一个单词的首字符都要大写。<br>&#160;&#160;&#160;&#160;例如：XxxYyyZzz （PersonDao）</p>
<p>变量名和方法名：<br>&#160;&#160;&#160;&#160;第一个单词的首字符小写，后续的单词首字符大写。<br>&#160;&#160;&#160;&#160;例如：xxxYyyZzz （addPerson）</p>
<p>常量：<br>&#160;&#160;&#160;&#160;所有字符都大写，多个单词之间使用下划线_隔开。<br>&#160;&#160;&#160;&#160;例如：XXX_YYY_ZZZ （PERSON_COUNT 人的数量）</p>
<p>包名：<br>&#160;&#160;&#160;&#160;都小写<br>&#160;&#160;&#160;&#160;例如：xxx.yyy.zzz （com.nun.dao）</p>
<h2 id="二、关键字"><a href="#二、关键字" class="headerlink" title="二、关键字"></a><strong>二、关键字</strong></h2><h3 id="1-定义-1"><a href="#1-定义-1" class="headerlink" title="1. 定义"></a><strong>1. 定义</strong></h3><blockquote>
<p>JDK定义的标识符就是关键字，也是被java语言赋予了特殊含义的单词。 <font color="#D2691E">（特点：关键字中所有字母都为小写）</font></p>
</blockquote>
<h3 id="2-常用的关键字"><a href="#2-常用的关键字" class="headerlink" title="2. 常用的关键字"></a><strong>2. 常用的关键字</strong></h3><p><img src="http://img.blog.csdn.net/20170524211529945?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzM4NDc4OA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br><img src="http://img.blog.csdn.net/20170524211553867?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzM4NDc4OA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<h2 id="三、常量和变量"><a href="#三、常量和变量" class="headerlink" title="三、常量和变量"></a><strong>三、常量和变量</strong></h2><p><strong>题外话：</strong><br>&#160;&#160;&#160;&#160;在了解变量和常量之前呢，我们来说说一些题外话。我们都知道任何程序的运行都离不开内存，都要从硬盘上把程序调到内存里。（下面我们以运行java程序为例）<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(1) 首先我们需要开辟内存空间（对于java来说是JVM）；<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(2) 接下来是提取数据（也就是我们编译好的 .class 文件）；<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(3) 最后是CPU调度运行。<br>&#160;&#160;&#160;&#160;常量和变量就是在内存中做数据交换的一个过程。</p>
<h3 id="1-常量"><a href="#1-常量" class="headerlink" title="1.常量"></a><strong>1.常量</strong></h3><p>在程序的<font color="#D2691E">运行期</font>数据不发生变化的量就是常量。（这里的运行期我在“初识java”中有提到）</p>
<h3 id="２-变量"><a href="#２-变量" class="headerlink" title="２.变量"></a><strong>２.变量</strong></h3><p><strong>定义：</strong><br>&#160;&#160;&#160;&#160;在程序运行的过程中，存储可以 变化的数据 的量。（这个量其实就是一个内存空间）</p>
<p><strong>对变量的通俗的理解：</strong><br>&#160;&#160;&#160;&#160;(1) 内存中的一个存储区域；<br>&#160;&#160;&#160;&#160;(2) 该区域有自己的名称（变量名）和类型（数据类型）；（变量是通过使用变量名来访问这个区域的）<br>&#160;&#160;&#160;&#160;(3) java中每个变量必须先声明，后使用；<br>&#160;&#160;&#160;&#160;(4) 使用变量之前先初始化值；（<font color="#D2691E">类的属性不需要初始化值</font>）</p>
<p><strong>定义变量的格式：</strong><br>&#160;&#160;&#160;&#160;语法：数据类型  变量名 = 初始化值；<br>&#160;&#160;&#160;&#160;例如：byte age = 10; （意思是：在运行时，会在内存中开辟一个字节的空间，这个空间的名字叫age，其存的值为10）<br>&#160;&#160;&#160;&#160;变量的定义位置：定义在方法中或者是语句块中；</p>
<p><strong>注意：</strong><br>&#160;&#160;&#160;&#160;在下文介绍的8种数据类型是有默认值的，这个默认值如果在变量中是不能使用的，必须是在类的属性中使用，因为类的属性可以不赋初始值。<br>&#160;&#160;&#160;&#160;8种基本数据作为类的属性时的初始值如下表：</p>
<table>
<thead>
<tr>
<th style="text-align:center">基本数据类型</th>
<th style="text-align:center">初始值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">byte</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">short</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">int</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">long</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">float</td>
<td style="text-align:center">0.0</td>
</tr>
<tr>
<td style="text-align:center">double</td>
<td style="text-align:center">0.0</td>
</tr>
<tr>
<td style="text-align:center">char</td>
<td style="text-align:center">‘\u0000’</td>
</tr>
<tr>
<td style="text-align:center">boolean</td>
<td style="text-align:center">false</td>
</tr>
</tbody>
</table>
<h2 id="四、数据类型"><a href="#四、数据类型" class="headerlink" title="四、数据类型"></a><strong>四、数据类型</strong></h2><p>变量的分类按数据类型进行。对于每一种数据都定义了明确的具体数据类型，在内存中分配了不同大小的内存空间。<br>java的数据类型分为 <font color="#D2691E">基本数据类型</font> 和 <font color="#D2691E">引用数据类型</font>。</p>
<h3 id="1-基本数据类型有8种"><a href="#1-基本数据类型有8种" class="headerlink" title="1.基本数据类型有8种"></a><strong>1.基本数据类型有8种</strong></h3><p><strong>整数类型：</strong><br>&#160;&#160;&#160;&#160;字节型（byte）<br>&#160;&#160;&#160;&#160;短整型（short）<br>&#160;&#160;&#160;&#160;长整型（long）<br>&#160;&#160;&#160;&#160;整型（int）</p>
<p><strong>小数类型：</strong><br>&#160;&#160;&#160;&#160;单精度（float）<br>&#160;&#160;&#160;&#160;双精度（double）</p>
<p><strong>字符类型（char）：</strong><br>&#160;&#160;&#160;&#160;char只能表示一个字符（英文、中文、标点符号）;<br>&#160;&#160;&#160;&#160;可以表示转义字符； 例如：char ch1 = ‘\t’;</p>
<p><strong>布尔类型（boolean）：</strong><br>&#160;&#160;&#160;&#160;boolean类型只能够取值为 true 或 false ；不能取值 null。</p>
<h4 id="1-字节型（byte）"><a href="#1-字节型（byte）" class="headerlink" title="(1) 字节型（byte）"></a><strong>(1) 字节型（byte）</strong></h4><p>&#160;&#160;&#160;&#160; 占用存储空间：1个字节<br>&#160;&#160;&#160;&#160; 表数范围：-128~127<br>&#160;&#160;&#160;&#160; 一个字节 = 8位；<br>&#160;&#160;&#160;&#160; 最大值：0 1 1 1 1 1 1 1 （这是一个字节，0 为符号位）；<br>&#160;&#160;&#160;&#160; 字节型是最小的整数类型，用byte来表示，其大小占1个字节。</p>
<h4 id="2-短整型（short）"><a href="#2-短整型（short）" class="headerlink" title="(2) 短整型（short）"></a><strong>(2) 短整型（short）</strong></h4><p>&#160;&#160;&#160;&#160; 占用存储空间：2个字节<br>&#160;&#160;&#160;&#160; 表数范围：-2^15~2^15-1</p>
<h4 id="3-整型（int）"><a href="#3-整型（int）" class="headerlink" title="(3) 整型（int）"></a><strong>(3) 整型（int）</strong></h4><p>&#160;&#160;&#160;&#160; 占用存储空间：4个字节<br>&#160;&#160;&#160;&#160; 表数范围：-2^31~2^31-1<br>&#160;&#160;&#160;&#160; 补充：byte 和 short 计算时，产生的结果默认为 int 型</p>
<h4 id="4-长整型（long）"><a href="#4-长整型（long）" class="headerlink" title="(4) 长整型（long）"></a><strong>(4) 长整型（long）</strong></h4><p>&#160;&#160;&#160;&#160; 占用存储空间：8个字节<br>&#160;&#160;&#160;&#160; 表数范围：-2^63~2^63-1</p>
<h4 id="5-双精度（double）"><a href="#5-双精度（double）" class="headerlink" title="(5) 双精度（double）"></a><strong>(5) 双精度（double）</strong></h4><p>&#160;&#160;&#160;&#160; 占用存储空间：8个字节<br>&#160;&#160;&#160;&#160; 表数范围：-1.798E308~1.798E308<br>&#160;&#160;&#160;&#160; 补充：如果整型数据在计算的时候 结果出现了小数，结果类型默认为 double</p>
<h4 id="6-单精度（float）"><a href="#6-单精度（float）" class="headerlink" title="(6) 单精度（float）"></a><strong>(6) 单精度（float）</strong></h4><p>&#160;&#160;&#160;&#160; 占用存储空间：4个字节<br>&#160;&#160;&#160;&#160; 表数范围：-3.403E38~3.403E38<br>&#160;&#160;&#160;&#160; 补充：3.403E38 是科学计数法，相当于 3.403*10^38<br>&#160;&#160;&#160;&#160; <font color="#D2691E">注意：float 在定义的时候一定要在初始值后加 f，否则会提示精度损失的报错</font><br>&#160;&#160;&#160;&#160; <font color="#D2691E">例如：float price = 20.6f；</font></p>
<h4 id="7-字符型（char）"><a href="#7-字符型（char）" class="headerlink" title="(7) 字符型（char）"></a><strong>(7) 字符型（char）</strong></h4><p>&#160;&#160;&#160;&#160; 占用存储空间：2个字节</p>
<h3 id="2-引用数据类型"><a href="#2-引用数据类型" class="headerlink" title="2.引用数据类型"></a><strong>2.引用数据类型</strong></h3><p><strong>类（class）；</strong> &#160;&#160; <strong>接口（interface）；</strong> &#160;&#160; <strong>数组（[]）</strong></p>
]]></content>
    
    <summary type="html">
    
      标识符、关键字、常变量、数据类型
    
    </summary>
    
      <category term="Java" scheme="http://Aileen-zl.github.io/categories/Java/"/>
    
    
      <category term="java" scheme="http://Aileen-zl.github.io/tags/java/"/>
    
      <category term="标识符" scheme="http://Aileen-zl.github.io/tags/%E6%A0%87%E8%AF%86%E7%AC%A6/"/>
    
      <category term="关键字" scheme="http://Aileen-zl.github.io/tags/%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    
      <category term="数据类型" scheme="http://Aileen-zl.github.io/tags/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>java开发环境的搭建</title>
    <link href="http://Aileen-zl.github.io/Java/java%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA.html"/>
    <id>http://Aileen-zl.github.io/Java/java开发环境的搭建.html</id>
    <published>2017-05-20T16:00:00.000Z</published>
    <updated>2017-06-30T12:33:26.525Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-java术语"><a href="#1-java术语" class="headerlink" title="1. java术语"></a><strong>1. java术语</strong></h2><p><code>JRE：</code>java runtime environment（java运行环境）<br><code>JVM：</code>java virtual machine（java虚拟机），java程序就是在jvm中运行的<br><code>java核心类库：</code>jre提供的让程序能运行的java类<br><code>JDK：</code>java development kit（java开发工具）</p>
<a id="more"></a>
<p><img src="http://img.blog.csdn.net/20170420210950501?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzM4NDc4OA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<h2 id="2-jdk文件结构"><a href="#2-jdk文件结构" class="headerlink" title="2. jdk文件结构"></a><strong>2. jdk文件结构</strong></h2><ol>
<li><code>bin：</code>jdk中所包含的开发工具的可执行命令文件（我们常用的是 java.exe 和 javac.exe）</li>
<li><code>db：</code>里面放了jdk自带的小型数据库系统</li>
<li><code>include：</code>jdk提供的本地接口编程</li>
<li><code>jre：</code>java运行环境</li>
<li><code>lib：</code>java开发包</li>
<li><code>src.zip：</code>源码包（jdk是开源的）</li>
</ol>
<h2 id="3-jdk的安装"><a href="#3-jdk的安装" class="headerlink" title="3. jdk的安装"></a><strong>3. jdk的安装</strong></h2><p>  （1）下载jdk <a href="http://www.oracle.com/technetwork/java/javase/downloads" target="_blank" rel="external">下载</a><br>  （2）安装jdk</p>
<blockquote>
<p><strong>补充：</strong><br>&#160;&#160;&#160;&#160;如果我们要在docs下执行bin目录中的<code>java.exe</code>或者<code>javac.exe</code>，那么我们需要在docs中进入到bin目录下，方可执行。（比如我们想通过docs打开qq，同样需要进入到qq的bin目录下，才能执行qq.exe，都是一样的道理）当我们在命令行中无法执行java或javac时，那么有可能就是没有进入到bin目录中去。而如果要想在任意的目录下执行他们的话，我们就必须配置环境变量path</p>
</blockquote>
<h2 id="4-配置环境变量"><a href="#4-配置环境变量" class="headerlink" title="4. 配置环境变量"></a><strong>4. 配置环境变量</strong></h2><table><tr><td bgcolor="#7FFFD4"><br>  步骤一：右击我的电脑——》 属性——》 高级系统设置——》 高级——》 环境变量（有两个区域）<br></td></tr></table>

<p><img src="http://img.blog.csdn.net/20170420221311963?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzM4NDc4OA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<blockquote>
<p><strong>补充：</strong><br>&#160;&#160;&#160;&#160;下图为path里的参数，SystemRoot 代表系统的根，而本系统的根为 C:\Windows</p>
</blockquote>
<p><img src="http://img.blog.csdn.net/20170420221906595?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzM4NDc4OA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<blockquote>
<p><strong>举例：</strong></p>
<p>&#160;&#160;&#160;&#160;&#160;（说明配置path的作用）比如 ping.exe 为 C:\Windows\System32 下的一个可执行文件，当我们要在docs中去执行ping时，必须进入到System32这个目录下，而假如我们想要在任意目录下都可执行ping时，就必须在path里去配置环境变量。</p>
<p>  &#160;&#160;&#160;&#160;&#160;&#160;在docs中ping时的执行情况：当我们在F盘下ping的时候，首先OS会在F盘下来查找 ping.exe 的文件，如果在F盘下找到了 ping.exe 那就执行；如果没有找到 ping.exe，那就去环境变量所指定的路径下去找（本系统环境变量所指定的路径为 C:\Windows\System32），此时如果找到了，就执行，如果没有找到就提示：”不是内部命令“。</p>
</blockquote>
<table><tr><td bgcolor="#7FFFD4"><br>  步骤二： path变量的配置（这里有两种方法配置它）<br></td></tr></table>

<p>&#160;&#160;&#160;&#160;&#160;&#160;&#160;<font color="#FF0000" size="5">方法一：</font>直接在path里添加 java.exe 或者 javac.exe 文件的绝对路径（如下图所示）</p>
<p><img src="http://img.blog.csdn.net/20170421154104982?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzM4NDc4OA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p><strong>注意：</strong>虽然方法一的path配置比较简单，但是像这种写死的方式我们一般是不建议使用的，最好使用方法二较为灵活。</p>
<p>&#160;&#160;&#160;&#160;&#160;&#160;&#160;<font color="#FF0000" size="5">方法二：</font>我们首先新建一个 <code>JAVA_HOME</code> 变量，再把变量值设置为 <code>D:\java\jdk1.7.0_45</code>；接下来再去path变量里设置变量值 <code>%JAVA_HOME%\bin</code>。（如下图所示）</p>
<p><img src="http://img.blog.csdn.net/20170421155750298?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzM4NDc4OA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p><img src="http://img.blog.csdn.net/20170421155802689?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzM4NDc4OA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<blockquote>
<p><strong>注意：</strong><br>&#160;&#160;&#160;&#160;在这里可能有人会问，新建的变量名可不可以不叫 JAVA_HOME，而取别的名，其实是可以的，但是我们为了见名知意，让别人一看你这个就知道是干什么的，所以最好还是取名为 JAVA_HOME。对了，这里需要特别注意的是，每次配置了环境变量之后，都要重启一下docs。</p>
</blockquote>
<table><tr><td bgcolor="#7FFFD4"><br>  步骤三： 新建classpath变量，变量值为：.;%JAVA_HOME%\lib;%JAVA_HOME%\lib\tools.jar<br></td></tr></table>


<p><img src="http://img.blog.csdn.net/20170421161551680?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzM4NDc4OA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<h2 id="5-补充环境变量的解析"><a href="#5-补充环境变量的解析" class="headerlink" title="5. 补充环境变量的解析"></a><strong>5. 补充环境变量的解析</strong></h2><ol>
<li><p><code>JAVA_HOME：</code><br>&#160;&#160;&#160;&#160;JDK的安装路径。为什么要配置JAVA_HOME环境变量？<strong>一是</strong>为了方便引用，比如，JDK安装在 E:\java\jdk1.7.0_15 目录里，则设置JAVA_HOME为该目录路径，那么以后要使用这个路劲的时候，只需要输入<code>%JAVA_HOME%</code>即可，避免每次每次引用都输入很长的路劲串；<strong>二是</strong>统一原则，当JDK路径改变的时候，只需要更改JAVA_HOME的变量值即可，否则，就要更改任何使用绝对路径引用JDK目录的文档，要是万一没有更改完全，某个程序找不到JDK，后果可想而知。</p>
</li>
<li><p><code>classpath：</code><br>&#160;&#160;&#160;&#160;1）java加载类路径。为什么要配置classpath变量？只有配置了classpath变量，才能使得java解析器知道到哪里去找标准类库，这些标准类库是开发JDK的人已经写好的，我们只管使用就行。比如我们常使用到的 java.lang 包中的类，在配置classpath变量后被设置为默认导入，所以在写程序时就不用import这个包了。那么这些标准类库在哪呢？它其实是在JDK的lib目录下以 jar 为后缀的文件中：一个是dt.jar，一个是tools.jar，这两个jar包都位于 E:\java\jdk1.7.0_15\lib 目录下。<font color="#D2691E">配置过程图见上面的步骤三</font><br><font color="red">在路径前加了个“.”表示当前目录。</font><br>&#160;&#160;&#160;&#160;2）让我们通过命令行可以在任意目录下找到你指定的 class文件 的位置。而无须再进入到 class文件 所在目录下之后再去运行它。（在本机中，我所编写的java代码放在 F:\zl\java练习 路径下，所以在classpath的变量值后边加上此路径，<font color="#D2691E">注意变量与变量之间需要加“;”</font>) 配置过程如下图所示：（注意：java运行class时，如果设置了classpath，那么先去classpath下查找要运行的class文件，如果classpath下找不到相应的class文件则会报错，这时我们需要修改classpath的配置。）</p>
</li>
<li><p><code>path：</code><br>&#160;&#160;&#160;&#160;为什么要配置path变量？因为系统将根据该变量的值找到java编程中需要的一些程序，比如 java.exe 、 javac.exe等；而且让我们的 java.exe 和 javac.exe 通过命令行可以在任意目录下执行。</p>
</li>
</ol>
<p>&#160;&#160;&#160;&#160;<img src="http://img.blog.csdn.net/20170424152435461?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzM4NDc4OA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
]]></content>
    
    <summary type="html">
    
      java开发环境搭建
    
    </summary>
    
      <category term="Java" scheme="http://Aileen-zl.github.io/categories/Java/"/>
    
    
      <category term="java" scheme="http://Aileen-zl.github.io/tags/java/"/>
    
      <category term="jdk" scheme="http://Aileen-zl.github.io/tags/jdk/"/>
    
      <category term="jvm" scheme="http://Aileen-zl.github.io/tags/jvm/"/>
    
      <category term="java环境变量配置" scheme="http://Aileen-zl.github.io/tags/java%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>初识java</title>
    <link href="http://Aileen-zl.github.io/Java/%E5%88%9D%E8%AF%86java.html"/>
    <id>http://Aileen-zl.github.io/Java/初识java.html</id>
    <published>2017-05-19T16:00:00.000Z</published>
    <updated>2017-06-30T12:27:23.397Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-简单的java程序"><a href="#1-简单的java程序" class="headerlink" title="1. 简单的java程序"></a><strong>1. 简单的java程序</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"Hello World"</span>);	</div><div class="line">	&#125;	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>解释：</strong> class 是类的标识符；HelloWorld 是自定义的类名，<font color="red">该类名一定要和文件名一致，</font>首字符要大写；<code>public static void main(String[] args){}</code> 是主方法的入口；大括号要成对出现。</p>
</blockquote>
<a id="more"></a>
<h2 id="2-java的运行机制"><a href="#2-java的运行机制" class="headerlink" title="2. java的运行机制"></a><strong>2. java的运行机制</strong></h2><p>我们写的java代码都是源代码（.java），源代码是不能执行的，必须要编译成字节码文件（.class）。<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;编译：javac  文件名.java  （这里的 c 其实就是 compile 编译的意思）<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;运行：java  字节码文件名</p>
<hr>
<p><strong>java程序的执行过程：</strong><br>&#160;&#160;&#160;&#160;1)  首先 <font color="#D2691E">java文件</font> 要先编译成 <font color="#D2691E">class文件</font>，然后再把 <font color="#D2691E">class文件</font> 载入到 <font color="#D2691E">JVM</font> 中方可运行。<br>&#160;&#160;&#160;&#160;2) 编译好的 class文件 是在我们的硬盘中，但在硬盘中是不能运行 class文件的，必须调到内存里才能运行；当我们在运行class文件时，会立即在内存中创建出一个<font color="#D2691E"> java虚拟机（JVM）</font>，创建完java虚拟机之后，会立马把硬盘中的 class文件 调入到内存当中的 java虚拟机中，此时，JVM就可以运行这个 class文件了。（比如：当我们运行<font color="#D2691E">java HelloWorld </font>时，在内存中创建JVM，然后把 <font color="#D2691E">HelloWorld.class </font>加载到 JVM 中之后再运行，程序执行完成后，JVM立即被释放。）<br>&#160;&#160;&#160;&#160;3) JVM其实就是java的字节码文件（.class）运行时在内存当中创建的虚拟机，然后再运行class文件。也就是说，我们在编译的时候根本就没有涉及到运行。<br>&#160;&#160;&#160;&#160;4) 那么这个过程显然是 CPU 做的调动。</p>
<hr>
<p><strong>java程序简单的运行过程图</strong><br>&#160;&#160;&#160;&#160;<img src="http://img.blog.csdn.net/20170424150058085?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzM4NDc4OA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
]]></content>
    
    <summary type="html">
    
      初识java,java的运行机制
    
    </summary>
    
      <category term="Java" scheme="http://Aileen-zl.github.io/categories/Java/"/>
    
    
      <category term="java" scheme="http://Aileen-zl.github.io/tags/java/"/>
    
      <category term="java运行机制" scheme="http://Aileen-zl.github.io/tags/java%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6/"/>
    
      <category term="初识java" scheme="http://Aileen-zl.github.io/tags/%E5%88%9D%E8%AF%86java/"/>
    
  </entry>
  
  <entry>
    <title>docs下的常用命令</title>
    <link href="http://Aileen-zl.github.io/Java/docs%E4%B8%8B%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html"/>
    <id>http://Aileen-zl.github.io/Java/docs下的常用命令.html</id>
    <published>2017-05-18T16:00:00.000Z</published>
    <updated>2017-06-30T12:30:26.620Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-盘符的切换"><a href="#1-盘符的切换" class="headerlink" title="1. 盘符的切换"></a>1. 盘符的切换</h3><p>&#160;&#160;&#160;&#160;&#160;&#160;<code>d:</code> 如 切换到d盘 d:</p>
<a id="more"></a>
<p>  <img src="http://img.blog.csdn.net/20170420154916333?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzM4NDc4OA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="切换到d盘"></p>
<h3 id="2-展示文件夹下的所有文件和文件夹"><a href="#2-展示文件夹下的所有文件和文件夹" class="headerlink" title="2. 展示文件夹下的所有文件和文件夹"></a>2. 展示文件夹下的所有文件和文件夹</h3><p>&#160;&#160;&#160;&#160;&#160;&#160;<code>dir</code></p>
<p><img src="http://img.blog.csdn.net/20170420155517154?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzM4NDc4OA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="dir"></p>
<h3 id="3-创建文件夹"><a href="#3-创建文件夹" class="headerlink" title="3. 创建文件夹"></a>3. 创建文件夹</h3><p>&#160;&#160;&#160;&#160;&#160;&#160; <code>md 文件夹名称</code>，如：md filename</p>
<p><img src="http://img.blog.csdn.net/20170420160324963?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzM4NDc4OA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<h3 id="4-创建文件"><a href="#4-创建文件" class="headerlink" title="4. 创建文件"></a>4. 创建文件</h3><p>&#160;&#160;&#160;&#160;&#160;&#160; <code>copy con 文件名</code>，如：copy con 1.txt，使用 <code>ctrl + c</code> 来结束</p>
<p><img src="http://img.blog.csdn.net/20170420161311014?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzM4NDc4OA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<h3 id="5-目录的切换"><a href="#5-目录的切换" class="headerlink" title="5. 目录的切换"></a>5. 目录的切换</h3><p>&#160;&#160;&#160;&#160;&#160;&#160;<code>cd 目录名</code>，如：cd filename 切换到filename目录<br>&#160;&#160;&#160;&#160;&#160;&#160;<code>cd.</code>，切换到当前目录<br>&#160;&#160;&#160;&#160;&#160;&#160;<code>cd..</code>，切换到上一层目录<br>&#160;&#160;&#160;&#160;&#160;&#160;<code>cd/</code>，切换到当前盘符的根目录</p>
<h3 id="6-删除文件夹"><a href="#6-删除文件夹" class="headerlink" title="6. 删除文件夹"></a>6. 删除文件夹</h3><p>&#160;&#160;&#160;&#160;&#160;&#160; <code>rd 文件夹名</code>，（文件夹是空的）</p>
<h3 id="7-删除文件"><a href="#7-删除文件" class="headerlink" title="7. 删除文件"></a>7. 删除文件</h3><p>&#160;&#160;&#160;&#160;&#160;&#160; <code>del 文件名</code>，（可以使用通配符）如：del 1.txt</p>
<blockquote>
<p>注意：如果删除多个文件，可以使用逗号方式来分隔多个文件</p>
</blockquote>
<p>&#160;&#160;&#160;&#160;&#160;&#160; 可以使用通配符方式：<code>del *.txt</code>（会删掉所有以.txt为结尾的文件）；<code>del *</code> （删除所有文件）</p>
<h3 id="8-清屏"><a href="#8-清屏" class="headerlink" title="8. 清屏"></a>8. 清屏</h3><p>&#160;&#160;&#160;&#160;&#160;&#160;  <code>cls</code></p>
<h3 id="9-显示当前操作系统下所有的环境变量"><a href="#9-显示当前操作系统下所有的环境变量" class="headerlink" title="9. 显示当前操作系统下所有的环境变量"></a>9. 显示当前操作系统下所有的环境变量</h3><p> &#160;&#160;&#160;&#160;&#160;&#160;  <code>set</code></p>
<p> <strong>查询某一个具体的环境变量：</strong><br> &#160;&#160;&#160;&#160;set 变量名<br> &#160;&#160;&#160;&#160;例如：set path</p>
<p><strong>设置临时环境变量：</strong><br> &#160;&#160;&#160;&#160;set 变量名 = 变量值<br> &#160;&#160;&#160;&#160;例如：set classpath=.;f:/zl/java练习<br> &#160;&#160;&#160;&#160;注意：临时环境变量，只在当前的docs窗口有效，如果窗口关闭临时环境变量就是失效</p>
]]></content>
    
    <summary type="html">
    
      docs下的常用命令
    
    </summary>
    
      <category term="Java" scheme="http://Aileen-zl.github.io/categories/Java/"/>
    
    
      <category term="docs命令" scheme="http://Aileen-zl.github.io/tags/docs%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
</feed>
